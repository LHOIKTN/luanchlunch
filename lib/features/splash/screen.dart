import 'package:flutter/material.dart';
import 'package:launchlunch/features/game_start/screen.dart';
import 'package:launchlunch/utils/preload.dart';
import 'package:launchlunch/utils/image_validator.dart';
import 'package:launchlunch/theme/app_colors.dart';

class SplashScreen extends StatefulWidget {
  const SplashScreen({super.key});

  @override
  State<SplashScreen> createState() => _SplashScreenState();
}

class _SplashScreenState extends State<SplashScreen>
    with TickerProviderStateMixin {
  late AnimationController _fadeController;
  late AnimationController _scaleController;
  late Animation<double> _fadeAnimation;
  late Animation<double> _scaleAnimation;
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();

    _fadeController = AnimationController(
      duration: const Duration(milliseconds: 1500),
      vsync: this,
    );

    _scaleController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );

    _fadeAnimation = Tween<double>(
      begin: 0.0,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _fadeController,
      curve: Curves.easeInOut,
    ));

    _scaleAnimation = Tween<double>(
      begin: 0.8,
      end: 1.0,
    ).animate(CurvedAnimation(
      parent: _scaleController,
      curve: Curves.elasticOut,
    ));

    _startAnimations();
    _startPreload(); // Ïï†ÎãàÎ©îÏù¥ÏÖòÍ≥º ÎèôÏãúÏóê Î°úÎî© ÏãúÏûë
  }

  void _startAnimations() async {
    await Future.delayed(const Duration(milliseconds: 300));
    _fadeController.forward();

    await Future.delayed(const Duration(milliseconds: 500));
    _scaleController.forward();
  }

  void _startPreload() async {
    print('üîÑ Ïä§ÌîåÎûòÏãú ÌôîÎ©¥ÏóêÏÑú Îç∞Ïù¥ÌÑ∞ ÌîÑÎ¶¨Î°úÎìú ÏãúÏûë...');

    setState(() {
      _isLoading = true;
    });

    try {
      print('üì¶ PreloadData Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±...');
      final preloader = PreloadData();

      print('üöÄ preloadAllData() Ìò∏Ï∂ú ÏãúÏûë...');
      await preloader.preloadAllData();
      print('‚úÖ preloadAllData() ÏôÑÎ£å!');

      // Ïù¥ÎØ∏ÏßÄ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ Î∞è Î≥µÍµ¨
      print('üîç Ïù¥ÎØ∏ÏßÄ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ ÏãúÏûë...');
      final imageValidator = ImageValidator();
      await imageValidator.validateAndRepairImages();
      print('‚úÖ Ïù¥ÎØ∏ÏßÄ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ ÏôÑÎ£å!');

      // ÌîÑÎ¶¨Î°úÎìú ÏôÑÎ£å ÌõÑ Í≤åÏûÑ ÏãúÏûë ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
      if (mounted) {
        print('üéÆ GameStartScreenÏúºÎ°ú Ïù¥Îèô...');
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (context) => const GameStartScreen()),
        );
      } else {
        print('‚ö†Ô∏è ÏúÑÏ†ØÏù¥ ÎßàÏö¥Ìä∏ÎêòÏßÄ ÏïäÏùå - ÌôîÎ©¥ Ïù¥Îèô Ï∑®ÏÜå');
      }
    } catch (e) {
      print('‚ùå ÌîÑÎ¶¨Î°úÎìú Ïã§Ìå®: $e');
      print('‚ùå ÏóêÎü¨ ÏÉÅÏÑ∏: ${e.toString()}');
      print('‚ùå Ïä§ÌÉù Ìä∏Î†àÏù¥Ïä§: ${StackTrace.current}');

      // ÏóêÎü¨Í∞Ä Î∞úÏÉùÌï¥ÎèÑ Í≤åÏûÑ ÏãúÏûë ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô (Ïò§ÌîÑÎùºÏù∏ Î™®Îìú)
      if (mounted) {
        print('üîÑ Ïò§ÌîÑÎùºÏù∏ Î™®ÎìúÎ°ú GameStartScreen Ïù¥Îèô...');
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (context) => const GameStartScreen()),
        );
      } else {
        print('‚ö†Ô∏è ÏúÑÏ†ØÏù¥ ÎßàÏö¥Ìä∏ÎêòÏßÄ ÏïäÏùå - Ïò§ÌîÑÎùºÏù∏ Î™®Îìú Ïù¥ÎèôÎèÑ Ï∑®ÏÜå');
      }
    }
  }

  @override
  void dispose() {
    _fadeController.dispose();
    _scaleController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.background,
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Î°úÍ≥† Ïï†ÎãàÎ©îÏù¥ÏÖò
            AnimatedBuilder(
              animation: Listenable.merge([_fadeAnimation, _scaleAnimation]),
              builder: (context, child) {
                return Transform.scale(
                  scale: _scaleAnimation.value,
                  child: Opacity(
                    opacity: _fadeAnimation.value,
                    child: Container(
                      width: 120,
                      height: 120,
                      decoration: BoxDecoration(
                        color: AppColors.primary,
                        borderRadius: BorderRadius.circular(20),
                        boxShadow: [
                          BoxShadow(
                            color: AppColors.primary.withOpacity(0.3),
                            blurRadius: 20,
                            offset: const Offset(0, 10),
                          ),
                        ],
                      ),
                      child: const Icon(
                        Icons.restaurant,
                        size: 60,
                        color: Colors.white,
                      ),
                    ),
                  ),
                );
              },
            ),
            const SizedBox(height: 40),

            // Ïï± Ïù¥Î¶Ñ
            AnimatedBuilder(
              animation: _fadeAnimation,
              builder: (context, child) {
                return Opacity(
                  opacity: _fadeAnimation.value,
                  child: const Text(
                    'ÌïúÏûÖÎëêÏûÖ',
                    style: TextStyle(
                      fontSize: 32,
                      fontWeight: FontWeight.bold,
                      color: AppColors.primary,
                      fontFamily: 'HakgyoansimDunggeunmiso',
                    ),
                  ),
                );
              },
            ),

            const SizedBox(height: 20),

            // Î°úÎî© Ïù∏ÎîîÏºÄÏù¥ÌÑ∞
            if (_isLoading)
              AnimatedBuilder(
                animation: _fadeAnimation,
                builder: (context, child) {
                  return Opacity(
                    opacity: _fadeAnimation.value,
                    child: const Column(
                      children: [
                        SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            valueColor: AlwaysStoppedAnimation<Color>(
                                AppColors.primary),
                          ),
                        ),
                        SizedBox(height: 16),
                        Text(
                          'Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...',
                          style: TextStyle(
                            fontSize: 14,
                            color: AppColors.textHint,
                            fontFamily: 'HakgyoansimDunggeunmiso',
                          ),
                        ),
                      ],
                    ),
                  );
                },
              ),
          ],
        ),
      ),
    );
  }
}
